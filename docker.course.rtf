{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red4\green4\blue4;\red247\green247\blue247;\red0\green0\blue0;
\red0\green0\blue0;\red77\green77\blue77;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c1176\c1176\c1176;\cssrgb\c97647\c97647\c97647;\cssrgb\c0\c0\c0\c5098;
\cssrgb\c0\c0\c0;\cssrgb\c37647\c37647\c37647;\cssrgb\c0\c0\c0\c10196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww38200\viewh21600\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
- a Docker contains multiple containers. Docker uses LXC containers (other types of containers exist but not used with docker). \
- Containers (or Docker containers)\'a0are completely isolated environments. As in\'a0they can have their own processes or services,\'a0 their own network interfaces, their own mounts,\'a0just like washing machines, except they all share\'a0the same OS kernel.\
\
# os overview \
- OS: operating system: consists of two things : an OS kernel and a set of softwares. \
The OS kernel is responsible for interacting with the softwares (upper level) and underlying hardware (lower level). Thus,\'a0the OS kernel remains the same, which is Unix. \
it's the software above it that makes\'a0\cf2 \cb4 these operating systems different (Linux/MacOS). This software\'a0may consist of a different user interface drivers,\'a0\cf2 \cb3 compilers, file managers, developer tools, etc.\
So, you have a common Unix kernel shared across all\'a0OSs and some custom software that differentiate operating systems from each other. \
\
- Docker containers share the underlying\'a0kernel. \
- For example, for a system with an\'a0Unix-Ubuntu OS with Docker installed on it, Docker\'a0\cf2 \cb4 can run any flavor of OS on top of it, as long\'a0as they're all based on the same kernel. In this\'a0\cf2 \cb3 case, Linux.\
- If the underlying OS is Ubuntu,\'a0 Docker can run a container based on another\'a0distribution of Linux (ex. Debian, Fedora,..) \
- Docker utilizes the underlying\'a0kernel of the Docker host, which works with all\'a0OSs with the same underlying kernel.\
- If your OS do not share the\'a0same kernel than the \'93container based kernel\'94, you won't be\'a0able to run it.\
- For example, you won\'92t be able to tun a Windows based container on a Docker\'a0host with Linux on it. For that you will require\'a0\'a0\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 # differences between virtual machines\'a0\'a0\cf2 \cb4 and containers\
- \cf2 \cb3 in case of Docker,\'a0 we have the underlying hardware infrastructure, then the OS and then Docker installed on\'a0the OS. Docker then manages the containers that\'a0run with libraries and dependencies alone. On top of this, there is the application (in the container, on the top of libraries and dependencies).  \
- In case of virtual machines, \cf2 \cb3 we have the underlying hardware infrastructure, then\cf2 \cb3  the\'a0hypervisor like ESX on the hardware, and then\'a0 the virtual machines on them. And the most important is that\cf0 \cb1  the \cf2 \cb3 virtual machine(s) has its own OS inside it, then on the top the dependencies and librairies and then the application.\'a0\'a0\
\pard\pardeftab720\partightenfactor0
\cf6 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Docker containers thus runs faster and consumes less memory.  \
\
So those are some differences\'a0 between the two. \
Note that an usually, i\cf2 \cb3 ts not\cf2 \cb3  either container or virtual machine situation.\'a0Its containers AND virtual machines. \
For instance, with large environments (1000s of application containers) running on 1000s of Docker hosts,\'a0you will often see containers provisioned on\'a0virtual Docker hosts. That way, we can utilize the\'a0advantages of both technologies.\
- remember that in this case,\'a0\'a0we will not be provisioning that many virtual\'a0 machines as we used to before, because earlier,\'a0\'a0\cf2 \cb7 we provisioned a virtual machine for each\'a0 application. Now, you might provision a virtual\'a0\'a0\cf2 \cb3 machine for hundreds or 1000s of containers. \
\
# Docker in practice\
- There are lots of containerized\'a0\cf2 \cb4 versions of applications readily available as of\'a0today. So most organizations have their - products \cf2 \cb3 containerized and available in a public Docker\'a0 repository called Docker Hub, or Docker store.\'a0\'a0\cf6 \cb1 \
- \cf2 \cb3 For example, you can find images (=containers) of most common\'a0operating systems, databases (ex. Container images of mangoDB), and other services\'a0and tools. \
- In practice: \cf2 \cb3 you install Docker on your host, then \cf2 \cb3 you identify the container images you need,\'a0then run application using Docker run commands with the name of the container image. \
- ex: running a \{Docker run mangodb\} command will run an\'a0instance of mangoDB on the Docker host.\
- If we need to run\'a0multiple instances of the web service nodejs or the database mangoDB, simply add as many instances as you need by repeating the docker run command and configure. \cf0 \cb1 \
\cf2 \cb3 - In case one of the instances were to fail,\'a0simply destroy that instance and launch anyone. \
\
\
\
\
}