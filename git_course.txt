----.git file----

- When you display all the files (ls —all or ls -a),  you will see all your files plus a hidden .git file.
- .git file saves all your commits over time. It’s presence shows that the corresponding directory is a git file.
- .git has all of the changes recorded in the history of this repository, which includes the ones we made on github.com.


----git status, add----

- git status command shows all of the files that were *updated or created or deleted, but haven't been saved in a commit* yet.
- When you add a new file, git status will show an “untracked files” list which corresponds to files that .git doesn’t know about yet cause not added yet.
- So you have to tell Git to track the file before you can save it: use the git add command.

# track all the files listed in the untracked and the modified section.
git add --all

# track specific file file_name.py
git add file_name.py

# delete changes in unstaged files
git checkout --

----git commit----

- git commit saves changes locally. So versions are stored in the local .git file in the git repo. 
- To save the commit into GitHub, you need to push. 
- git commit: the first -m “…” corresponds to the title of the commit. You can add on the same line another message which corresponds to the description box of the commit.

# commit changes and specify a title and description
git commit -m “added new file” -m “this files is about code in .py”

# see differences with last commit before add/commit
git diff

# git add and commit in one command line
# only work for modified files, not new ones
# -a for add, -m for message
git commit -am "comment here"



----git push---

# push to master, two methods
# origin: is an option: refers to our git repository
# main: is the branch that we want to push to.
# rk: when doing a pull request, do not push on master but on a new branch created previously to any changes from clone
git push origin main
git push

# use option -u (for upstream) set the default branch to push to when just using "git push"
# synonymes:-u and --set-upstream
git push -u origin main
git push -u origin branch1

# to initialise a new git repo from non git dir, enter the dir and write
git init

# use remote to link the new git dir to github repo, to be able to push
git remote origin git@repofromgithubcreatedrepo

----git branch----

# get actual branch
git branch

# switch between branches
# ypu must commit or stash changes before switching to another branch
# stash is a way to save your changes somewhere (a temporary holfing place) and be able to recall them, it avoids commit and loosing changes.
git checkout branch_name

# create new branches: git checkout
# to create a new branch, use option -b
git checkout -b name_of_new_branch

# switch to another branch
git checkout main
git checkout name_of_new_branch

# check the differences/modifications from two branches : do it after add.
# you must be in a branch and compare modifications with another branch.
git commit branch_name.

# check differences between the current branch and another branch
git diff branch_name_to_compare_to

# delete branch once merged
git branch -d beanch_name

- By default, git clone creates only one branch: the currently checked out one, generally master. However, it does create remote tracking branches for all other branches in the remote. Think of these as local copies of the remote's branches, which can be updated by fetching. They're not real local branches, as they're intended only as pointers to where the remote's branches are, not for you to work on. If you run git branch -a you'll see all branches, local and remote. 

# create a local branch to work on
git branch branch_name origin/branch_name

---git merge---

- maybe done directly on github
- git merge: merges two branches together.
- we usually work in teams on a git repo. Good practices recommend to work in different branches, then when everybody is ok with the code, merge the branch to the main branch or other branch.
- after merging, one of the two branchs must be deleted as both are identical after being merged.
- In large projects, we would merge all of our feature branches or bug fixes or whatever into the dev branch and then delete the branch that we just merged in. And then when all the changes on the dev branch are ready,  
those get merged into main. But dev never gets deleted, just like master never gets deleted, those kind of stay around forever. All the other branches are just temporary. 

- a pull request is needed to merge two branches
- we merge two branchs <=> we merge a pr 

# update your branch = merge master branch to your current branch
git merge main

# solve merge conflicts: by text editing

----pull request----

- a pull request is a request to pull ("merge") your code in another branch.
- once we have made a pull request (PR), anyone can review our code, comment on it, ask us to make changes or updates.
- after you make a PR, you can also update the code just by making additional commits and pushing them up to GitHub, as long as it's on the same branch that you're making the PR  with.
- Once the PR is merged, you'll generally delete your feature branch cause it became identical to the one it was merged to. And to switch back to the master branch.
- When you want to create new changes, you create another new branch, then commit, pr, and merge.

- updating the local git branch is a pull request.
- use git pull to merge the remote branch into yours

# update specific branch
# if main set as -u, use second command line
git pull origin master
git pull




----git undo----

- reset command undo the add and the commit steps.
- Your local changes are kept but your last commit became the resetted commit.
- reset uncommit and unadd, so that your repo became unstaged/unadded.
- --hard option in reset completely remove local changes. It's the same as git clone specific_commit.


# cancel changes before doing git add command
# i.e. reset the git repo to the last commit
# HEAD points to the last commit
git reset HEAD

# cancel git add before git commit
# if file_name not specified, all files are reset to before-add stage
git reset add file_name
git reset

# cancel git commit, i.e. undo the last commit.
# <=> uncommit and unadd/unstage
# HEAD refers to the last commit
# HEAD~1 points to 1 commit before last commit
git reset HEAD~1

# print all commits: arranged in reverse chronological order
git log

# reset git repo to a specific commit
# chose commit in git log and paste the corresponding commit code
git log
git reset commit_code

# reset git repo to specific commit with removing all local changes
git reset --hard commit_code_from_git_log

# reset a specific version of specific files: two methods:
git checkout commit_code_from_git_log file_name1 file_name2 file_name3
git reset commit_code_from_git_log file_name1 file_name2 file_name3

---git diff---

# review the changes made to a file
git diff commit_code_from_git_log file_name

---git fork---

- fork means to copy the repo to your github.
- fork allows users to make whtever changes they want on the code without waiting the code owner.
- steps: fork, code modification, push on your repo and pull request to suggest changes.






Resume: git --help:
- start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

- work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

- examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

- grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

- collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects


Additional : 
---- Connect your machine to GitHub: SSH keygen ----

1. Generate ssh-key by using <ssh-keygen -t rsa -b 4096 -C “email@adress.com”>  command 
Now, the default file for the SSH key is inside your user directory in the dot SSH directory, and  it will be called id_rsa: ex. Users/Youssef/.ssh/id_rsa.
2. Name the generated key (asked by the terminal after executing step 1)
3. Asked password: you can chose to not include password by typing enter directly
-> key generated

-Now search for the key that you just  generated. 
-And now I find that there are two. So  there's testkey and testkey.pub. 
-So testkey.pub is the key that you're going to upload to  your GitHub interface. pub stands for public, it's called your public key, which means that it's okay for other people to see this key. 
-The key that was generated without the .pub extension is called your private key, and is the one that you have to keep secure on your local machine, you don't share  this key with anybody. 
- How it works is that the public key you put on GitHub, and then every time  you want to connect to GitHub or push your code on  GitHub or use your account via your local machine,  you use your private key to show GitHub, that you are the one that generated this public key. It's  a mathematical proof that only this private key could have generated this public key. I'm going  to print out this public key. And your key should  look something very long phrase. It starts by ssh-rsa, it has a bunch of characters in the middle and it ends with your email. Now you need to copy  this whole key””

Now, got to GitHub-Settings-SSH and  GPG keys. Here you can see any SSH keys associated with your account.  Click on new SSH  key, title it like you want. And then you paste your key in here. And now add SSH key to confirm my password. And now you can see  my key was successfully added. The only thing left to do is to make sure that your local Git  command line interface knows about the key you   just generated. This step is called “adding your ssh key to the ssh-agent”. See link for steps: (https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)