——DevOps——
DevOps is a set of practices that combines software development (Dev) and IT operations (Ops).
DevOps has one primary goal to achieve: continuous integration to continuous delivery.

——Containers——
- Containers are ways to package code and allow it to run on any machine.
- Code can be in different languages, rely on other software, install packages from an internet repo, and require specific system requirements (like memory size) in order to run properly.(The you run facebook app, you do not execute the app code on your system but on facebook server/computer)
- Remember that when you want to install a software on your computer, it tells you what minimum memory is required, what version of the OS is needed, … These constraints are eliminated when working with containers.
- In containerization, containers hold all of the requirements needed to run a program.
- Containers install all the prerequisite files in order to run the corresponding app.
- With containerization, developers can build/choose the software by themselves to ensure it will run and will not fail. They can instruct exactly what kind of system their software/app needs to run on.
- In containerization, there are two specific files that define what software is required and what hardware is required :
	- Dockerfile: controls the runtime environment and the installation of necessary packages.
	- Compose file (.yml): controls the hardware and the network security requirements. Often called docker-compose.yml
- After a container is created, it forms an image/docker image. 
- An Image/docker image is a file used to execute code in a container (or Docker container). 
- Docker images act as a set of instructions to build a Docker container, like a template. Docker images also act as the starting point when using Docker.
- Once the code has been containerized, and the image is created, the code can then be deployed on a chosen host, i.e. it can be run on a personal machine (local) or deployed in a cloud machine.

- One of the most desirable benefits of using containerization as a virtualization method is that it can operate on the cloud. Containers can be run/deployed inside platforms as Amazon EC2 or Google Compute Engine instances.


——Docker——
- def = Docker is a set of products that use OS-level virtualization to deliver software in packages called containers.
- Docker is a container provider.
- Docker can package an application and its dependencies in a virtual container that can run on any computer.
- The software that hosts the containers is called Docker Engine.

In app development, two common challenges for DevOps teams:
- keep the application operational and stable while developing new features.
- keep the application operational and stable regardless of the underlying platform that it runs on. -> Use of containers.

To avoid deploying codes that introduce environment-dependent bugs, developers run their application on a container.

- Containerization is the process of packaging an application’s code—with dependencies, libraries, and configuration files that the application needs to launch and operate efficiently.

#  Docker Components

- The Docker software consists of three components:

1). Engine:
- The Docker daemon (called >dockerd) is a process that manages Docker containers and handles container objects.
- The Docker client program, called >docker, provides a command-line interface (CLI) that allows users to interact with Docker daemons.
- Rq: deamon is a computer program that runs as a background process, rather than being under the direct control of an interactive user. 
- The Docker Engine is of the core components of a Docker architecture on which the application runs. You could also consider the Docker Engine as the application that’s installed on the system that manages containers, images, and builds.
- A Docker Engine consists of the following sub-components: 
	- The Docker Daemon is basically the server that runs on the host machine. It is responsible for building and managing Docker images.
	- The Docker Client is a command-line interface (CLI) for sending instructions to the Docker Daemon using special Docker commands. Though a client can run on the host machine, it relies on Docker Engine’s REST API to connect remotely with the daemon.
	- The REST API supports interactions between the client and the daemon.

2) Objects:
Docker objects are various entities used to assemble an application in Docker. The main classes of Docker objects are images, containers, and services.
	- A Docker container is a standardized, encapsulated environment that runs applications. A container is managed using the Docker API or CLI.
	- A Docker image is a *read-only* template used to build containers. Images are used to store and ship applications.
	- A Docker service allows containers to be scaled across multiple Docker daemons. The result is known as a swarm, a set of cooperating daemons that communicate through the Docker API.

3) Registries:
- A Docker registry is a repository of Docker images.
- The default registry is the Docker Hub, a public registry that stores public and official images for different languages and platforms. By default, a request for an image from Docker is searched within the Docker Hub registry.
- Docker clients connect to Registries to download/pull images or upload/push images that they have built.
- Docker Hub is the default registry where Docker looks for images.

# Docker Tools

1) Docker Compose
- It is a tool for defining and running multi-container Docker applications. 
- It uses YAML files (.yml) to configure the application's services and performs the creation and start-up process of all the containers with a single command. 
- The docker-compose command allows users to run commands on multiple containers at once.
- The docker-compose.yml file is used to define an application's services and includes various configuration options. For example, the build option defines configuration options such as the Dockerfile path.

2) Docker Swarm
- It provides native clustering functionality for Docker containers, which turns a group of Docker engines into a single virtual Docker engine. […]

3) Docker Volume
- It facilitates the independent persistence of data, allowing data to remain even after the container is deleted or re-created.

# Containers

- Containers are live instances of images on which an application or its independent modules are run.
- In an object-oriented programming analogy, an image is a class and the container is an instance of that class. This allows operational efficiency by allowing to you to multiple containers from a single image.
- Containers are isolated from one another and bundle their own software, libraries and configuration files. However they can communicate with each other through channels.
- All of the containers share the services of a single operating system kernel, thus, they use fewer resources than virtual machines.













